apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      containers:
        - name: sonarqube
          image: sonarqube:lts
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 200m
              memory: 1Gi
            limits:
              cpu: 500m
              memory: 2Gi
          ports:
            - containerPort: 9000
          env:
            - name: SONARQUBE_JDBC_URL
              value: jdbc:postgresql://postgres:5432/sonarqube
            - name: SONARQUBE_JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: username
            - name: SONARQUBE_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: password
          volumeMounts:
            - mountPath: /opt/sonarqube/data
              name: sonarqube-data
      volumes:
        - name: sonarqube-data
          persistentVolumeClaim:
            claimName: sonarqube-pv-claim

---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  type: LoadBalancer
  ports:
    - port: 9000
      targetPort: 9000
  selector:
    app: sonarqube

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sonarqube-pv-volume
  namespace: sonarqube
  labels:
    type: local
    app: sonarqube
spec:
  storageClassName: csi-cinder-high-speed
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/sonarqube-data"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonarqube-pv-claim
  namespace: sonarqube
  labels:
    app: sonarqube
spec:
  storageClassName: csi-cinder-high-speed
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
